	
// if scramble || (steps > 0) {
// 	//	eshell.RemoveShortEdges(desiredL * 0.8)
// 	eshell.CalcTensions(desiredL, 0.1)
// 	eshell.MoveVertices(ellipsoid, 0.01, 0.955)
// 	eshell.Step++
// 	redraw = true
// 	steps--
// }
// if redraw {
// 	scene.Remove(shellmesh)
// 	shellmesh = eshell.Prep(smat)
// 	scene.Add(shellmesh)
// 	stats.SetText(eshell.Stats(gauges, densities))
// 	redraw = false
// }

// spotLight := light.NewSpot(&math32.Color{R: 0.9, G: 0.9, B: 1}, 10000.0)
// spotLight.SetPosition(40, 40, 40)
// spotLight.SetDirection(-1, -1, -1)
// spotLight.SetVisible(true)
// scene.Add(spotLight)

// for _, v := range s.Vertices {
// 	fmt.Println(v.NiceString())
// }

// for _, ed := range s.Edges {
// 	fmt.Println(ed.NiceString())
// }

// for _, p := range s.Panels {
// 	fmt.Println(p.NiceString())
// }

// eshell.MakeMesh(desiredL, tolerance) // compute the tris
// shellmesh = eshell.Prep(smat)        // convert to opengl tris
// scene.Add(shellmesh)

// Scramble button
// scrambleBtn := gui.NewButton("Scramble")
// var scramble bool // run the sim
//var redraw bool   // redraw the mesh
// scrambleBtn.SetPosition(50, 40)
// scrambleBtn.SetSize(40, 18)
// scrambleBtn.Subscribe(gui.OnClick, func(name string, ev interface{}) {
// 	scramble = !scramble
// })
// mygui.Add(scrambleBtn)

// Some local aliases
// pi := math.Pi
// cos := math.Cos
// sin := math.Sin
// deg60 := pi / 3

// btnVisFunc := func(text string, toggle *bool, thing core.INode) {
// 	visBtn := gui.NewButton(text)
// 	visBtn.SetPosition(col1, row)
// 	visBtn.SetSize(40, 18)
// 	row += 22
// 	visBtn.Subscribe(gui.OnClick, func(name string, ev interface{}) {
// 		*toggle = !*toggle
// 		thing.SetVisible(*toggle)
// 	})
// 	mygui.Add(visBtn)
// }

// btnVisFunc("Wireframe", &wire, wireframe)
// btnVisFunc("Shell", &shell, shellmesh)
// btnVisFunc("Ellipsoid", &ellipy, eloid)

//btnVisFunc("Normals", &norms, shellmesh.normals)

// Ground
// tex0, err := texture.NewTexture2DFromImage("Nextgen_grass.jpg")
// if err != nil {
// 	log.Fatalf("Error loading texture: %s", err)
// }
// mat0 := material.NewStandard(&math32.Color{R: 1, G: 1, B: 1})
// mat0.AddTexture(tex0)
// mat0.SetSide(material.SideDouble)
// groundGeom := geometry.NewSegmentedCube(100, 2)
// ground := graphic.NewMesh(groundGeom, nil)
// ground.AddGroupMaterial(mat0, 0)
// ground.SetVisible(true)
// ground.RotateZ(-deg90)
// ground.SetPositionY(50 + float32(eshell.Base))

// scene.Add(ground)
// fname, ok, err := dlgs.File("Select filename for export", "*.stl", false)
// 		if err != nil {
// 			fmt.Println("Error displaying file dialog")
// 			return
// 		}
// 		if !ok {
// 			fmt.Println("No filename chosen")
// 			return
// 		}
// 		fmt.Printf("Filename chosen: %s\n", fname)
// 	})

	
	
	// eshell.MakeMesh(desiredL, tolerance) // compute the tris
		// shellmesh = eshell.Prep(smat)
		// shellmesh.SetVisible(shell)
		// scene.Add(shellmesh)

		// wireframe = eshell.PrepLines(wiremat) // convert to opengl tris
		// wireframe.SetVisible(wire)
		// scene.Add(wireframe)

		// shellmesh.normals = helper.NewNormals(shellmesh, 0.5, &math32.Color{R: 0, G: 0.7, B: 0}, 1)
		// shellmesh.normals.SetVisible(norms)
		// scene.Add(shellmesh.normals)

		// eloid = ellipsoid.LatLong(60, 60, 100, wht)
		// eloid.SetVisible(ellipy)
		// scene.Add(eloid)

		// gry := math32.Color{R: 0.2, G: 0.2, B: 0.2}
		// grid = helper.NewGrid(20, 0.5, &gry)
		// grid.TranslateY(float32(eshell.Base))
		// grid.SetVisible(wire)
		// scene.Add(grid)

		// Ground
		// tex0, err := texture.NewTexture2DFromImage("Nextgen_grass.jpg")
		// if err != nil {
		// 	log.Fatalf("Error loading texture: %s", err)
		// }
		// tex0.SetWrapS(gls.REPEAT)
		// tex0.SetWrapT(gls.REPEAT)
		// tex0.SetRepeat(100, 100)
		// mat0 := material.NewStandard(&math32.Color{R: 1, G: 1, B: 1})
		// mat0.AddTexture(tex0)
		// mat0.SetSide(material.SideBack)
		// groundGeom := geometry.NewSegmentedCube(100, 2)
		// ground = graphic.NewMesh(groundGeom, nil)
		// ground.AddGroupMaterial(mat0, 0)
		// ground.RotateZ(-deg90)
		// ground.SetPositionY(50 + float32(eshell.Base))
		// ground.SetVisible(shell)
		// scene.Add(ground)

		// stats.SetText(eshell.Stats(cam.Materials))

		//scramble = false


// TestIntersects tests the intersect function
// func (e *EShell) TestIntersects(n int) {
// 	origin := v3.NewSimVec(0, 0, 0)
// 	for i := 0; i < n; i++ {
// 		p := &e.Panels[i]
// 		tgc := e.Vertices[p.Corners[0]].Position
// 		for j := 1; j < len(p.Corners); j++ {
// 			tgc = tgc.Add(e.Vertices[p.Corners[j]].Position).(v3.SimVec)
// 		}
// 		gc := tgc.Scale(1.0 / float64(len(p.Corners)))
// 		seg := v3.NewSegment(v3.NewLine(origin, tgc), 0, 1000)
// 		v := &e.Vertices[p.Corners[0]]
// 		tri := v3.NewPatch(v.Position, p.Normal,
// 			e.Edges[p.Edges[0]].From(v.Serial), e.Edges[p.Edges[1]].From(v.Serial))
// 		where, hit := tri.TriIntersectSegment(seg)
// 		fmt.Printf("tgc %s\n", tgc)
// 		fmt.Printf("\nPanel %d, geom center %s\n  intersect? %t, where %s\n", i, gc, hit, where)
// 		fmt.Printf("Segment is %s\nPatch is %s\n", seg, tri)
// 	}
// }

// // TestIntersects2 tests the intersect function
// func (e *EShell) TestIntersects2(n int) {
// 	origin := v3.NewSimVec(0, 0, 0)
// 	p := &e.Panels[0]
// 	tgc := e.Vertices[p.Corners[0]].Position
// 	for j := 1; j < len(p.Corners); j++ {
// 		tgc = tgc.Add(e.Vertices[p.Corners[j]].Position).(v3.SimVec)
// 	}
// 	//	gc := tgc.Scale(1.0 / float64(len(p.Corners)))
// 	seg := v3.NewSegment(v3.NewLine(origin, tgc), 0, 1000)
// 	fmt.Printf("Center of panel 0: is %s\n\n\n", seg)

// 	for i := 0; i < n; i++ {
// 		p := &e.Panels[i]
// 		v := &e.Vertices[p.Corners[0]]
// 		tri := v3.NewPatch(v.Position, p.Normal,
// 			e.Edges[p.Edges[0]].From(v.Serial), e.Edges[p.Edges[1]].From(v.Serial))
// 		where, hit := tri.TriIntersectSegment(seg)
// 		//	fmt.Printf("tgc %s\n", tgc)
// 		fmt.Printf("Patch vertex is %d is %s\n", v.Serial, tri)
// 		fmt.Printf("Panel %d, intersect? %t, where %s\n", i, hit, where)
// 		w1, h1 := tri.Plane.IntersectSegment(seg)
// 		fmt.Printf("Seg/pane hits %t at %s\n\n", h1, w1)
// 	}
// }

// Prep makes a g3n geometry object from EShell
// func (e *EShell) Prep(mat *material.Standard) *EShellMesh {
// 	geom := geometry.NewGeometry()
// 	needV := 3 * len(e.Vertices)
// 	positions := math32.NewArrayF32(needV, needV)
// 	//	normals := math32.NewArrayF32(needV, needV)
// 	needP := 3 * len(e.Panels)
// 	indices := math32.NewArrayU32(needP, needP)
// 	for _, vertex := range e.Vertices {
// 		positions = append(positions,
// 			float32(vertex.Position.X()),
// 			float32(vertex.Position.Z()),
// 			float32(vertex.Position.Y()))
// 		// norm := vertex.Position.New(0.0, 0.0, 0.0)
// 		// for _, pNo := range vertex.Panels {
// 		// 	norm = norm.Add(e.Panels[pNo].Normal)
// 		// }
// 		// if len(vertex.Panels) > 0 {
// 		// 	norm = norm.Scale(1.0 / float64(len(vertex.Panels)))
// 		// }
// 		// normals = append(normals,
// 		// 	float32(norm.X()),
// 		// 	float32(norm.Z()),
// 		// 	float32(norm.Y()))
// 	}
// 	for _, panel := range e.Panels {
// 		if panel.Alive {
// 			indices = append(indices,
// 				uint32(panel.Corners[0]),
// 				uint32(panel.Corners[1]),
// 				uint32(panel.Corners[2]))
// 		}
// 	}
// 	geom.SetIndices(indices)
// 	geom.AddVBO(gls.NewVBO(positions).AddAttrib(gls.VertexPosition))
// 	// geom.AddVBO(gls.NewVBO(positions).AddAttrib(gls.VertexPosition).AddAttrib(gls.VertexNormal))
// 	//	geom.AddVBO(gls.NewVBO(normals).AddAttrib(gls.VertexNormal))
// 	shell := EShellMesh{}
// 	shell.Mesh.Init(geom, mat)
// 	return &shell
// }

//func (e EShell) {}

// Stl returns an stl representation of a panel as a single line of text
// func (p Panel) Stl() string {
// 	return fmt.Sprintf("facet normal %s  outer loop  vertex %s vertex %s vertex %s  endloop  endfacet\n",
// 		ell.V2stl(&p.Normal), ell.V2stl(&Vertices[p.Corners[0]]), ell.V2stl(&Vertices[p.Corners[1]]), ell.V2stl(&Vertices[p.Corners[2]]))
// }

// RemoveUnderwater button
// drownEdgesBtn := gui.NewButton("Drown Underwater")
// drownEdgesBtn.SetPosition(50, 100)
// drownEdgesBtn.SetSize(40, 20)
// drownEdgesBtn.Subscribe(gui.OnClick, func(name string, ev interface{}) {
// 	eshell.RemoveUnderwater()
// 	redraw = true
// })
// mygui.Add(drownEdgesBtn)

// Step button
// stepBtn := gui.NewButton("Step")
// stepBtn.SetPosition(50, 130)
// stepBtn.SetSize(40, 20)
// stepBtn.Subscribe(gui.OnClick, func(name string, ev interface{}) {
// 	steps = 1
// })
// mygui.Add(stepBtn)

// RemoveShortEdges removes those shorter than given length
//func (e *EShell) RemoveShortEdges(short float64) bool {
// 	var some bool
// 	for _, ed := range e.Edges {
// 		if ed.Alive && (len(ed.Panels) == 1) && (ed.Along.Length() < short) { // eliminate this edge
// 			oldE := ed
// 			oldP := e.Panels[ed.Panels[0]]
// 			oldV0 := e.Vertices[ed.Vertices[0]]
// 			oldV1 := e.Vertices[ed.Vertices[1]]
// 			newV := e.AddVertex(oldV0.Position.Add(oldE.Along.Scale(0.5))) // new vertex half way along short edge
// newE :=
// 			e.RemoveEdge(oldE.Serial)
// 			e.RemovePanel(oldP.Serial)
// 			e.RemoveVertex(oldV0.Serial)
// 			e.RemoveVertex(oldV1.Serial)
// 			some = true
// 		}
// 	}
// 	if some {
// 		a := e.CoupDeGrace()
// 		b := e.Undertaker()
// 		for a || b {
// 			a = e.CoupDeGrace()
// 			b = e.Undertaker()
// 		}
// 	}
// 	return true
// }

// RemoveUnderwater removes those on only one panel, below the waterline (give positive distance midplane is above z=0)
// func (e *EShell) RemoveUnderwater() {
// 	for _, ed := range e.Edges {
// 		if (ed.Alive) && (len(ed.Panels) == 1) { // edges of only one panel
// 			if (e.Vertices[ed.Vertices[0]].Position.Z() < e.Base) ||
// 				(e.Vertices[ed.Vertices[1]].Position.Z() < e.Base) {
// 				e.RemoveEdge(ed.Serial)
// 				fmt.Printf("Drowning edge %d\n", ed.Serial)
// 			}
// 		}
// 	}
// for _, v := range e.Vertices {
// 	if v.Alive && (v.Position.Z() < e.Base) {
// 		e.RemoveVertex(v.Serial)
// 		fmt.Printf("Drowning vertex %d\n", v.Serial)
// 	}
// }
// for _, p := range e.Panels {
// 	above := false
// 	for _, ed := range p.Edges {
// 		for _, v := range e.Edges[ed.Vertices {
// 			if e.Vertices[v.Serial].Position.Z() > e.Base {
// 				above = true
// 			}
// 		}
// 		if !above {
// 			e.RemovePanel(p.Serial)
// 		}
// 	}
// }
// 	a := e.CoupDeGrace()
// 	b := e.Undertaker()
// 	for a || b {
// 		a = e.CoupDeGrace()
// 		b = e.Undertaker()
// 	}
// }

// CoupDeGrace kills any injured elements
// func (e *EShell) CoupDeGrace() bool {
// 	some := false
// 	for _, v := range e.Vertices {
// 		if v.Alive && ((len(v.Edges) < 2) || (len(v.Panels) < 1)) {
// 			e.RemoveVertex(v.Serial)
// 			//			fmt.Printf("Killing vertex %d\n", v.Serial)
// 			some = true
// 		}
// 	}
// 	for _, ed := range e.Edges {
// 		if ed.Alive && ((len(ed.Panels) < 1) || (len(ed.Vertices) < 2)) {
// 			e.RemoveEdge(ed.Serial)
// 			//			fmt.Printf("Killing edge %d\n", ed.Serial)
// 			some = true
// 		}
// 	}
// 	for _, p := range e.Panels {
// 		if p.Alive && (len(p.Edges) < 3) {
// 			e.RemovePanel(p.Serial)
// 			//			fmt.Printf("Killing panel %d\n", p.Serial)
// 			some = true
// 		}
// 	}
// 	return some
// }

// Undertaker removes any dangly bits left over after removing edges etc.
// func (e *EShell) Undertaker() bool {
// 	some := false
// 	for _, v := range e.Vertices {
// 		for _, eNo := range v.Edges {
// 			if !e.Edges[eNo].Alive {
// 				e.Vertices[v.Serial].Edges = remove(v.Edges, eNo)
// 				//				fmt.Printf("Sweeping edge %d from vertex %d\n", eNo, v.Serial)
// 				some = true

// 			}
// 		}
// 		for _, pNo := range v.Panels {
// 			if !e.Panels[pNo].Alive {
// 				e.Vertices[v.Serial].Panels = remove(v.Panels, pNo)
// 				//				fmt.Printf("Sweeping panel %d from vertex %d\n", pNo, v.Serial)
// 				some = true
// 			}
// 		}
// 	}

// 	for _, ed := range e.Edges {
// 		for _, vNo := range ed.Vertices {
// 			if !e.Vertices[vNo].Alive {
// 				e.Edges[ed.Serial].Vertices = remove(ed.Vertices, vNo)
// 				//				fmt.Printf("Sweeping vertex %d from edge %d\n", vNo, ed.Serial)
// 				some = true
// 			}
// 		}
// 		for _, pNo := range ed.Panels {
// 			if !e.Panels[pNo].Alive {
// 				e.Edges[ed.Serial].Panels = remove(ed.Panels, pNo)
// 				//				fmt.Printf("Sweeping panel %d from edge %d\n", pNo, ed.Serial)
// 				some = true
// 			}
// 		}
// 	}

// 	for _, p := range e.Panels {
// 		for _, eNo := range p.Edges {
// 			if !e.Edges[eNo].Alive {
// 				e.Panels[p.Serial].Edges = remove(p.Edges, eNo)
// 				//				fmt.Printf("Sweeping edge %d from panel %d\n", eNo, p.Serial)
// 				some = true
// 			}
// 		}
// 	}
// 	return some
// }

// s0 := pa.Sides[0]
// 	l0 := s0.Length()
// 	s0N := s0.Normalized()

// 	s1 := pa.Sides[1]
// 	l1 := s1.Length()
// 	s1N := s1.Normalized()

// 	D := whu.Subtract(pa.Corner)
// 	d := D.Length()

// 	d0 := D.Dot(s0N)
// 	d1 := D.Dot(s1N)

// 	//	fmt.Printf("D and projs: %s, %6.3f vs %6.3f OR %6.3f vs %6.3f\n", D, d0, l0, d1, l1)

// 	if (d0 > l0) || (d0 <= 0) || (d1 > l1) || (d1 <= 0) {
// 		fmt.Println("Early bail")
// 		return where, false
// 	}

// 	cosTheta := s0N.Dot(s1N)
// 	//	theta := math.Acos(cosTheta)
// 	//	fmt.Printf("theta: %5.2f,  alpha: %5.2f, beta: %5.2f\n", theta*r2d, math.Acos(d0/d)*r2d, math.Acos(d1/d)*r2d)

// 	if (d0 + d1) > d*(1+cosTheta) {
// 		fmt.Printf("D and projs: %s, d0: %6.3f d1: %6.3f  d0+d1: %6.3f vs d*(1+cosT) %6.3f\n", D, d0, d1, d0+d1, d*(1+cosTheta))
// 		return where, false
// 	}

// 	// if (math.Acos(d0/d) > theta) || (math.Acos(d1/d) > theta) {
// 	// 	return where, false
// 	// }

// 	//lTot := d0/l0 + d1/l1       // sum of the sides as fractions of sides
// 	//	limit := 1.0 + s0N.Dot(s1N) // i.e. 1+cos(theta) scaled to D

// 	// if lTot > limit {
// 	// 	return where, false
// 	// }

// 	fmt.Println("HIT!")

// Barycenter technique
// Compute vectors
// v0 = C - A
// v1 = B - A
// v2 = P - A

// // Compute dot products
// dot00 = dot(v0, v0)
// dot01 = dot(v0, v1)
// dot02 = dot(v0, v2)
// dot11 = dot(v1, v1)
// dot12 = dot(v1, v2)

// // Compute barycentric coordinates
// invDenom = 1 / (dot00 * dot11 - dot01 * dot01)
// u = (dot11 * dot02 - dot01 * dot12) * invDenom
// v = (dot00 * dot12 - dot01 * dot02) * invDenom

// // Check if point is in triangle
// return (u >= 0) && (v >= 0) && (u + v < 1)
//   For a triangle with sides ~a, ~b and origin ~O any point ~p in it obeys:
//      norm(~p-~O).norm(~a) + norm(~p-~O).norm(b~) < 1 + cos(theta)
//   where theta is the angle between ~a & ~b.
